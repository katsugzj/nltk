<DOC>
<DOCNO>  ZF109-732-905  <DOCNO>
<TEXT>
understand sparc architectur M over past three year 've cover sparc implement announc n't cover architectur itself. P It 's clear sparc one domin architectur 1990s. P thi detail review architectur help set stage seri new implement due 1991. M ten year ago risc still mostli concept first argument simpl architectur made simplic implement seen perhap import goal risc. P thi led berkeley architect coin term risc defin simpl architectur instruct possible. P the small number instruct led simpl fast instruction-decod logic. P accord argument small decod logic left room function import overal perform complex instruct memory-to-memori operations. P the berkeley team conclud data cach next item integr on-chip. P To avoid wast space cach tag directli speed procedur call implement data cach larg regist file overlap window M the sparc architectur bear signific resembl berkeley risc architectur goal two effort compat member berkeley team also part sun' architectur team. P sun want simpl architectur could built gate array would reduc load store much possible. M regist window M the concept regist window resembl berkeley risc architectur sparc striking. P As berkeley risc architectur sever justif includ regist window sparc M To reduc register-alloc burden compil writers. M To reduc number load store code gener simpl compilers. M To exploit on-chip ram current futur implementations. M reduc number load store primari concern form stage sparc first implement would separ instruct data buses. P the use combin instruct data bu probabl influenc cost consider A combin bu mean cheaper processor packag impli singl extern cach cheaper two extern caches. M run-tim stack M To see regist window reduc number load store understand basic run-tim stack manag needed. P figur 1 show represent run-tim stack memory. P As typic stack grow higher address lower address stack pointer whose valu maintain processor regist mark lowest locat stack current active. P stack locat address specifi posit offset stack pointer. M the run-tim stack use support procedur call languag C. O A compil gener code procedur accord simpl rules. P At start procedur gener code alloc stack frame privat use procedur decrement stack pointer O follow code procedur compil gener code dealloc procedur 's stack frame increment stack pointer M A compil gener code pa paramet use procedur call convent P In typic call convent stack frame consist three area incom paramet privat local variabl outgo parameters. P In figur 1 shade area show paramet result pass call procedur call procedur stack frame procedur involv alloc overlap. P the overlap area outgo paramet place call procedur previou frame figur 1 access call procedur current frame M By use call convent compil compil two procedur complet independently. P It gener code refer variabl stack use appropri offset procedur compiled. P To refer first paramet offset +9 would use call procedur current frame offset +0 would use call procedur previou frame M stack In regist M regist window mimic stack structur two differ structur implement onchip regist size three area fixed. P for memory-bas run-tim stack compil decid size area M the stack-in-regist approach two major advantag run-tim stack memory. P first memori refer need access stack data second data resid regist file mean two operand read third written everi cycle. M figur 2 illustr oper regist windows. P each window three set regist in local out correspond directli area run-tim stack frame. P At one time singl window activ current M In sparc architectur window contain 24 regist eight three kinds. P In addit eight global alway activ regardless window active. P thu one time 32 regist directli addressable. P gr0 alway read zero write effect. P the sparc architectur allow implement provid number regist window 1 32. M the regist file gener implement big block regist overlap effect produc register-address decod hardware. P To decid physic regist address decod circuit use regist number instruct window number suppli special processor register. P the out in overlap actual map physic regist file. M the regist file circular last window overlap first window. P for exampl consid implement three window figur 2. P the out window label next window would overlap in window label previou window M regist file manag M To manag regist window sparc three special instruct two special registers. P the instruct save restor rett return trap P the regist cwp current window pointer wim window invalid mask M the cwp serf purpos regist window stack pointer serf memory-bas stack frame the cwp determin window current implic window previou next M the wim determin window regist file valid available. P for regist window scheme function properli must alway one invalid window overflow underflow detected. O overflow tri alloc new window regist file full underflow tri dealloc window regist file empti occur window on-chip typic seven tri contain arbitrarili long run-tim stack. M By alway least one window mark invalid program guarante bump invalid window cwp wrap around circular window file. P when program tri use window mark invalid hardwar trap taken routin either flush regist file content memori restor regist file content memory. P In essenc portion top memory-bas run-tim stack alway contain regist file. M anoth reason alway one window mark invalid support fast trap processing. P sparc trap automat decrement cwp. P In case one window valid trap-handl routin guarante free access window mark invalid danger trap routin clobber valid data regist file. P the rett instruct automat increment cwp. M the save restor instruct perform basic alloc dealloc window stack frame regist file. P save decrement cwp check appropri bit wim see overflow occurred. P restor increment cwp check appropri bit wim see underflow occurred. M one drawback regist window larg processor context. P when task switch occur valid regist window includ written memori must saved. P thi particularli signific unix system system overhead associ context switch real-tim multitask system seriou problem. O switch window perform separ instruct call instruct possibl compil gener code use regist window within task. P In case regist window use instead one-per-task basi provid fast context switching. O exist sparc compil support mode oper however. M instruct set M partial regist window sparc instruct set similar berkeley risc instruct set. P tabl 1 show sparc instruct set version 7 architectur manual. P some slight modif expect version 8 full multipli divid instruct see previou issu articl sparclit M sparc includ abund load store instructions. P the usual byte halfword word oper provid load byte halfword data zero sign extend desired. P In addit sparc move double-word operand 64 bit one instruction. M As compar mip 29000 sparc fairli rich set memori address modes. P An address follow regist register-plus-regist register-plus-sign constant sign constant. O figur 3 show three encod format sparc instructions. P the first two case format 3 show encod load stores. P the bit must set 1 choos register-plus-sign constant case 2 O otherwis register-plus-regist case 1 chosen. P the two mode implement set rs1 field select gr0 alway read zero P note sign constant 13 bit long suffici frequent us address operand structur stack frame. M load store byte halfword word double-word operand access either normal main memori 256 altern address space P actual four 256 altern space normal address space describ P the altern address space specifi asi field case 1 format 3. P the version instruct use asi field privileg caus trap execut user mode. M the processor alway gener asi. P four asi 's reserv indic mode type access perform asi 8 user instruct space asi 9 supervisor instruct space asi 10 user data space asi 11 supervisor data space. P all asi 's implement definable. P thu could use control i/o devic implement commun protocol multiprocessor systems. P altern address space use access memori manag unit design use refer mmu also use control regist on-chip peripher fujitsu 's sparclite. M the sparc architectur defin load store instruct transfer data memori dedic floating-point regist file. P these instruct move either single-precis 32-bit operand double-precis 64-bit operand. P the load store floating-point state queue instruct provid allow oper system handl floating-point except share floating-point unit multitasking. M sparc also defin load store instruct user-defin coprocessor. P these instruct assum coprocessor structur like floating-point unit It separ regist file instruct queue pend operations. M round set load store ldstub swap instructions. P these instruct mutual-exclus primit use multitask multiprocess oper systems. M the sparc arithmet logic instruct typic risc processor. P the set includ usual add subtract without carri left right logic shift arithmet right shift logic op and OR xor plain version version second operand complemented. M the add subtract logic instruct avail two version one modifi condit code indic cc one leaf unchanged. P the abil specifi arithmet instruct modifi condit code help compil optim re-organ instruct sequenc sinc prevent condit code modifi instruct one calcul desir condit condit branch. M all arithmet shift logic instruct three-address register-to-regist operations. P each instruct specifi either three regist two sourc destin two regist sign constant one sourc regist one sourc constant one destin regist P arithmet instruct use case 2 format 3. M the sethi instruct use combin regular arithmet instruct form full 32-bit constant register. P first add OR instruct oper gr0 small constant place lower 13 bit 32-bit constant register. P then sethi set upper bit register. M one uniqu featur sparc architectur support tag data types. P the support minim best sinc consist two instruct taddcc tsubcc. P these instruct work like addcc instruct except V overflow condit code determin differ overflow occur regular arithmet overflow gener either two least-signific bit set either sourc operand. P As indic tabl 1 two instruct come variant indic tv trap overflow genrated. M the least-signific two bit integ operand treat two-bit tag instructions. P the tag four valu architectur defin valu 00 mean 30-bit integ P sinc three valu directli implement architectur trap generated. P the trap handler implement whatev function appropriate. P thi capabl intend use ai-ori languag lisp rare used. M the current sparc architectur integ multipli divid instructions. P the low frequenc oper combin difficulti implement origin sparc gate array probabl explain absence. P sinc multipli much frequent divid multipli step instruct included. P had sparc architect bit foresight could defin multipli divid instruct caus trap trap handler emul instructions. P thi approach use amd 's 29000 allow full multipli ad implement without requir softwar chang take advantag it. M the sparc architectur manual give sever exampl multipl divis performed. P use mulscc 32 x 32 multipl 64-bit result done roughli 40 instruct assum cach hit much le effici microprocessor use microcode. O divis hand must implement subroutin execut instruct per bit. M some user report multiply- divide-intens program run faster sun-3 's 68000-base machin sun 's sparc-bas machines. O As result rumor abound version 8 sparc architectur includ multipli divid instructions. P inde sparclit see mu PR 11/14/90 p. 1 add multipli instruct divid step. M branch instruct sparc architectur fairli typical. P there singl uncondit call slightli gener jump-and-link return-from-trap three set condit branch instruct test differ set condit codes. P the trap-condit instruct also technic branch instruction. M call instruct us format 1. P the 30-bit displac shift left two bit call jump subroutin anywher 32-bit address space. P also call write valu PC address call regist r 15 P A routin call must return address r 15 +8 P the offset 8 requir offset 4 would point next instruct branch delay slot P nest subroutin n't save return address sinc regist window mechan provid new r 15 procedure. M jump-and-link jmpl us case 2 format 3. P jmpl gener call return address written regist specifi rd field thu return address save gener register. P also jmpl branch address specifi sum regist rs1 plu either regist rs2 13-bit constant simm13. P thu jmpl perform indirect call. P also specifi gr0 rd field jmpl implement return subroutin rs1 specifi r 15 actual r 31 new window simm13 specifi integ +8 M the return-from-trap rett use return implicit subroutin call made whenev trap taken processor. P rett take care return interrupt instruct stream switch processor state necessari increment cwp etc. P rett privileg indic P tabl 1. M sparc defin three set condit code integ condit code icc floating-point condit code fcc coprocessor condit code ccc P A separ group condit branch instruct defin set condit codes. P all usual condit branch possibl e.g. branch-not-equ branch-greater-than etc. M condit branch alway pc-rel use case 2 format 2 figur 3. P thi give gener 22-bit rel displacement. M the 1-bit field format annul bit. P for condit branch set zero yield familiar delay branch instruct immedi follow branch delay instruct alway execut regardless outcom branch. M when set one behavior changes. P when branch taken delay instruct executed. P when branch taken delay instruct executed. P thu annul condit branch optim use bottom loop annul action remov restrict instruct place delay slot delay instruct execut loop exits. M the trap-on-integer-condition-cod ticc instruct test usual conditions. P If test true trap taken. P thi instruct use implement system call protect oper system perform bound check array accesses. M As discuss previous save restor instruct chang cwp perform check wim see overflow underflow occurred. P In addit save restor act like regular add instructions. O these instruct use case 2 format 3 figur 3 like add instruct therefor specifi regist constant added. O the one twist sourc regist read old window one address cwp save restor chang result written new window one address new cwp M thi allow save restor simultan alloc new window on-chip regist file alloc new stack frame main memory. P A subroutin would need alloc need local storag avail singl window. M the RD WR instruct use read write special-purpos processor state registers. P these includ Y regist use captur high word 32-by-32-bit multipl perform use multiply-step instruct psr processor statu regist wim window invalid mask regist tbr trap base regist contain base address tabl address except handl routines. M the iflush instruct provid permit program flush instruct cache. M the fpop instruct encod floating-point operations. P thi instruct us case 3 format 3 figur 3. P the opf field encod variou operations. P As integ arithmet instruct format encod three-address register-to-regist operations. P fpop encod larg number oper includ convers F TO question mark replac integ singl doubl x extend usual arithmetic. M sparc major risc architectur support extended-precis 128-bit operands. P So far howev sparc hardwar implement single- double-precis operations. M the cpop instruct like fpop instruct except oper pre-defined. P the semant cpop instruct depend specif coprocessor implementations. M bu implement M sparc implement critic processor chip singl 32-bit data bus. P other chip 29000 88000 separ bu mip chip use singl bu twice per cycl get effect two buses. P the singl bu mean load store take least one addit cycl compar chip separ time-multiplex bu instruct fetch must suspend bu use data P thi one reason sparc-bas machin yield le perform compet machin notabl mip equal clock rates. M despit defici sparc-bas system cheapest unix machin available. P cost one place singl bu advantag allow easi implement singl unifi extern cache. P also sparc-bas system start overcom perform degrad singl bu sheer clock speed. P the 40-mhz sparcstation-2 compar favor workstat base processor separ buses. M the lack separ bu turn temporari defici chip densiti increase. P even inexpens sparclit separ on-chip bu cach futur high-end implement like use similar implementation. M conclus M the S sparc ostens stand scalabl though rumor origin stood sun P while sparc probabl scalabl architectur respect truli scalabl one sens regist file scale technolog permits. P the softwar affect regist file size part oper system. O for architectur regist file size fix implementations. P In practic howev scalabl use exist implement use either seven eight windows. P ad window benefit unless applic make frequent deepli nest subroutin calls. M sparc technic better risc architectures. P If applic realli need larg regist file 29000 probabl better choic sinc 32 regist address one time sparc. P the 88000 extra address mode base plu scale index superior bit field support. P mip ad featur lack sparc mips-2 architectur includ annul branch double-word memori refer instruct fulli interlock loads. M while sparc outstand architectur certainli viabl ten thousand satisfi sparc user attest continu build momentum sun 's success number semiconductor vendor develop sparc chips. P far sparc-bas unix system sold base risc processor new implement sparc progress architecture. O 
</TEXT>
</DOC>
